name: Frontend CD with Docker Hub
on:
  push:
    branches:
      - master # master에 push되었을 때 yml 실행

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18' # Node.js 버전 설정

      - name: Install dependencies
        run: npm install

      - name: Run TypeScript type check
        run: npm run type-check # 타입 체크 스크립트 실행

      - name: Run build
        run: npm run build # 빌드 스크립트 실행

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Env
        run: |
          touch ./.env.local
          echo "${{secrets.ENV}}" > ./.env.local

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build and Release Docker Image
        run: |
          docker buildx build --cache-to=type=local,dest=/tmp/.buildx-cache --cache-from=type=local,src=/tmp/.buildx-cache -t ${{ secrets.DOCKERHUB_REPO }} .
          docker tag ${{ secrets.DOCKERHUB_REPO }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

      - name: Deploy to server
        if: success() # 이전 단계가 성공한 경우에만 실행
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -aqf "name=^${{ secrets.DOCKERHUB_REPO }}") || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
            sudo docker run -d -p 3000:3000 --name ${{ secrets.DOCKERHUB_REPO }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
            sudo docker image prune -f
